"""Add relation from change to task.

Revision ID: 9c0ccea0f519
Revises: 6f86ae03db9b
Create Date: 2018-11-12 10:19:49.935349

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from datetime import timedelta

import os
import sys
from sqlalchemy.orm.session import Session
# Set system path, so alembic is capable of finding the stickerfinder module
parent_dir = os.path.abspath(os.path.join(os.getcwd(), "..", "stickerfinder"))
sys.path.append(parent_dir)

from stickerfinder.models import Change, Task # noqa


# revision identifiers, used by Alembic.
revision = '9c0ccea0f519'
down_revision = '6f86ae03db9b'
branch_labels = None
depends_on = None


def upgrade():
    """Create a relation between changes and user revert tasks.

    Automatically set relationship for all changes which have a revert task in the next 24 hours.
    """
    op.add_column('change', sa.Column('check_task_id', postgresql.UUID(as_uuid=True), nullable=True))
    op.create_index(op.f('ix_change_check_task_id'), 'change', ['check_task_id'], unique=False)
    op.create_foreign_key(None, 'change', 'task', ['check_task_id'], ['id'])

    session = Session(bind=op.get_bind())

    check_tasks = session.query(Task) \
        .filter(Task.type == Task.USER_REVERT) \
        .order_by(Task.user_id, Task.created_at.asc()) \
        .all()

    for task in check_tasks:
        session.query(Change) \
            .filter(Change.user_id == task.user_id) \
            .filter(Change.created_at > (Task.created_at - timedelta(days=1))) \
            .filter(Change.created_at < Task.created_at) \
            .update({'check_task_id': task.id}, synchronize_session='fetch')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'change', type_='foreignkey')
    op.drop_index(op.f('ix_change_check_task_id'), table_name='change')
    op.drop_column('change', 'check_task_id')
    # ### end Alembic commands ###
